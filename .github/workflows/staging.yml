name: Deploy Staging
on:
  pull_request:
    branches:
      - main
jobs:
  deploy:
    if: github.event.action == 'opened'
    name: Deploy app
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Generate Environment Name
        id: generate-env-name
        run: echo "env_name=bnsn-pr-${{ github.event.number }}" >> $GITHUB_ENV

      - name: Setup Supabase
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Create Supabase Project
        id: create_supabase_project
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_API_KEY }}
          SUPABASE_ORGANIZATION_ID: ${{ secrets.SUPABASE_ORGANIZATION_ID }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        run: |
          supabase projects create ${{ env.env_name }} --region us-east-1 --org-id ${{env.SUPABASE_ORGANIZATION_ID}} --db-password  ${{env.SUPABASE_DB_PASSWORD}}
          SUPABASE_PROJECT_ID=$(supabase projects list | grep "${{ env.env_name }}" | awk '{print $1}')
          SUPABASE_DB_URL=$(supabase db get-connection-string --project-id $SUPABASE_PROJECT_ID)
  
          echo "SUPABASE_PROJECT_ID=$SUPABASE_PROJECT_ID" >> $GITHUB_ENV
          echo "SUPABASE_DB_URL=$SUPABASE_DB_URL" >> $GITHUB_ENV

      #- run: supabase init
      #- run: supabase db start   

      - name: Set up Flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy to Fly.io
        run: |
          if ! flyctl apps list --json | jq -e '.[] | select(.Name == "${{ env.env_name }}")' > /dev/null; then
            flyctl apps create ${{ env.env_name }} --org personal
            echo "Created new app ${{ env.env_name }}"
          else
            echo "App ${{ env.env_name }} already exists"
          fi 
          flyctl deploy --app ${{ env.env_name }} --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY }}

      - name: Execute supabase commands on Fly.io instance
        run: |
          flyctl ssh console --app ${{ env.env_name }} --command "pwd"
        env:
          FLY_API_TOKEN: ${{ secrets.FLY }}

  cleanup_environment:
    if: github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Set up Flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Get Environment Name
        run: echo "::set-output name=env_name::bnsn-pr-${{ github.event.number }}"

      - name: Destroy Fly.IO App
        run: flyctl apps destroy ${{ env.env_name }} --yes
        env:
          FLY_API_TOKEN: ${{ secrets.FLY }}

      - name: Destroy GitHub Environment
        run: gh api -X DELETE /repos/{owner}/{repo}/environments/${{ env.env_name }}